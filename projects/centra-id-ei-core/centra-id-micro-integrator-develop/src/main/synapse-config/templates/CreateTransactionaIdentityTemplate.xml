<?xml version="1.0" encoding="UTF-8"?>
<template name="CreateTransactionaIdentityTemplate" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="userDataId" />
    <parameter name="origin" />
    <parameter name="action" />
    <parameter name="guid" />
    <parameter name="uuid" />
    <parameter name="modifyData" />
    <parameter name="profileRecalculation" />
    <parameter name="password" />
    <parameter name="origin" />
    <sequence>
        <log level="custom">
            <property name="CreateTransactionaIdentityTemplate" value="Inicio..." />
            <property name="userDataId" expression="$func:userDataId" />
            <property name="X-Forwarded-For" expression="$ctx:X-Forwarded-For" />
            <property name="UserName" expression="$ctx:UserName" />
        </log>
        <property name="uri.var.userDataId" expression="$func:userDataId" />
        <property name="origin" expression="$func:origin" />
        <property name="action" expression="$func:action" />
        <property name="modifyData" expression="$func:modifyData" />
        <property name="profileRecalculation" expression="$func:profileRecalculation" />
        <property name="guid" expression="$func:guid" />
        <property name="uuid" expression="$func:uuid" />
        <call-template target="GetCurrentDateTemplate" />
        <log level="custom">
            <property name="uri.var.userDataId" expression="get-property('uri.var.userDataId')" />
        </log>
        <call>
            <endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/UserDataSearch/{uri.var.userDataId}" />
        </call>
        <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
            <then>
                <property name="userData" expression="$body//*" scope="default" type="OM" />
                <log level="custom">
                    <property name="supervisor" expression="//idSupervisor/text()" />
                </log>
                <filter regex="true" source="boolean(//identificacionSupervisor/text())">
                    <then>
                        <property name="identificacionSupervisor" expression="//identificacionSupervisor/text()" />
                        <property name="nombreSupervisor" expression="//nombreSupervisor/text()" />
                    </then>
                </filter>
                <filter regex="true" source="boolean(//identificacionContraparte/text())">
                    <then>
                        <property name="identificacionSupervisor" expression="//identificacionContraparte/text()" />
                        <property name="nombreSupervisor" expression="//nombreContraparte/text()" />
                    </then>
                </filter>
                <filter regex="true" source="boolean(//identificacionResponsable/text())">
                    <then>
                        <property name="identificacionSupervisor" expression="//identificacionResponsable/text()" />
                        <property name="nombreSupervisor" expression="//nombreResponsable/text()" />
                    </then>
                </filter>
                <!-- encriptar contrasena -->
                <property name="AES_PAYLOAD" expression="$func:password" />
                <property name="AES_ACTION" scope="default" type="STRING" value="ENCRYPT" />
                <sequence key="EncryptDecryptSeq" />
                <filter regex="true" source="boolean($ctx:globalProfilePreviusId)">
                    <then>
                        <payloadFactory media-type="json">
                            <format>
                                {
                                    "transactionalIdentity": {
                                        "uuid": "$1",
                                        "guid": "$2",
                                        "username": "$3",
                                        "workerCode": "$4",
                                        "employeeLastName": "$5",
                                        "employeeFirstName": "$6",
                                        "identification": "$7",
                                        "identificationSupervisor": "$8",
                                        "namesSupervisor": "$9",
                                        "companyCode": "$10",
                                        "companyName": "$11",
                                        "groupCode": "$12",
                                        "groupName": "$13",
                                        "divisionCode": "$14",
                                        "divisionName": "$15",
                                        "departmentCode": "$16",
                                        "departmentName": "$17",
                                        "areaCode": "$18",
                                        "areaName": "$19",
                                        "subsidiaryCode": "$20",
                                        "subsidiaryName": "$21",
                                        "costCenterCode": "$22",
                                        "costCenterName": "$23",
                                        "locationCode": "$24",
                                        "localtionName": "",                    
                                        "positionName": "$25",
                                        "hierarchicalLevelCode": "$26",
                                        "hierarchicalLevelName": "$27",
                                        "depositAccountNumber": "$28",
                                        "employeeStartDate": "$29",
                                        "employeeEndDate": "$30",
                                        "employeeStatus": "$31",
                                        "employeeCode": "$32",
                                        "userType": "$33",
                                        "userSubType": "$34",
                                        "mobile": "$35",
                                        "origen": "$36",
                                        "status": "REGISTRADO",
                                        "createdDate": "$37",
                                        "plannedExecutionDate": "$38",
                                        "modifyData": $39,
                                        "profileRecalculation":$40,
                                        "typeAction":"$41",
                                        "mail": "$42",
                                        "globalProfileId": $43,
                                        "userDataId": $44,
                                        "password" : "$45",
                                        "identificationType" : "$46",
                                        "globalProfilePreviusId" : "$47"
                                    }
                                }            
                            </format>
                            <args>
                                <arg evaluator="xml" expression="get-property('guid')" />
                                <arg evaluator="xml" expression="get-property('uuid')" />
                                <arg evaluator="xml" expression="get-property('userData')//username/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoTrabajador/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//apellidosEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombresEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//identificacion/text()" />
                                <arg evaluator="xml" expression="get-property('identificacionSupervisor')" />
                                <arg evaluator="xml" expression="get-property('nombreSupervisor')" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoCompania/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreCompania/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoAgrupacion/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoAgrupacion/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoDivision/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreDivision/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoDepartamento/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreDepartamento/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoArea/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreArea/text()" />
                                <arg evaluator="xml" value="X" />
                                <arg evaluator="xml" value="X" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoCentroCosto/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreCentroCosto/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombrelocalidad/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreCargo/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoNivelJerarquico/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoNivelJerarquico/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//numeroCuentaDeposito/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//fechaIngreso/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//fechaSalida/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//estadoEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//tipousuario/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//subtipo/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//celular/text()" />
                                <arg evaluator="xml" expression="get-property('origin')" />
                                <arg evaluator="xml" expression="get-property('currentDate')" />
                                <arg evaluator="xml" expression="get-property('currentDate')" />
                                <arg evaluator="xml" expression="get-property('modifyData')" />
                                <arg evaluator="xml" expression="get-property('profileRecalculation')" />
                                <arg evaluator="xml" expression="get-property('action')" />
                                <arg evaluator="xml" expression="get-property('userData')//correoElectronico/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//idPerfilGlobal/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//id/text()" />
                                <arg evaluator="xml" expression="get-property('AES_RESULTS')" />
                                <arg evaluator="xml" expression="get-property('userData')//tipoIdentificacion/text()" />
                                <arg evaluator="xml" expression="get-property('globalProfilePreviusId')" />
                            </args>
                        </payloadFactory>
                    </then>
                    <else>
                        <payloadFactory media-type="json">
                            <format>
                                {
                                    "transactionalIdentity": {
                                        "uuid": "$1",
                                        "guid": "$2",
                                        "username": "$3",
                                        "workerCode": "$4",
                                        "employeeLastName": "$5",
                                        "employeeFirstName": "$6",
                                        "identification": "$7",
                                        "identificationSupervisor": "$8",
                                        "namesSupervisor": "$9",
                                        "companyCode": "$10",
                                        "companyName": "$11",
                                        "groupCode": "$12",
                                        "groupName": "$13",
                                        "divisionCode": "$14",
                                        "divisionName": "$15",
                                        "departmentCode": "$16",
                                        "departmentName": "$17",
                                        "areaCode": "$18",
                                        "areaName": "$19",
                                        "subsidiaryCode": "$20",
                                        "subsidiaryName": "$21",
                                        "costCenterCode": "$22",
                                        "costCenterName": "$23",
                                        "locationCode": "$24",
                                        "localtionName": "",                    
                                        "positionName": "$25",
                                        "hierarchicalLevelCode": "$26",
                                        "hierarchicalLevelName": "$27",
                                        "depositAccountNumber": "$28",
                                        "employeeStartDate": "$29",
                                        "employeeEndDate": "$30",
                                        "employeeStatus": "$31",
                                        "employeeCode": "$32",
                                        "userType": "$33",
                                        "userSubType": "$34",
                                        "mobile": "$35",
                                        "origen": "$36",
                                        "status": "REGISTRADO",
                                        "createdDate": "$37",
                                        "plannedExecutionDate": "$38",
                                        "modifyData": $39,
                                        "profileRecalculation":$40,
                                        "typeAction":"$41",
                                        "mail": "$42",
                                        "globalProfileId": $43,
                                        "userDataId": $44,
                                        "password" : "$45",
                                        "identificationType" : "$46",
                                        "globalProfilePreviusId" : null
                                    }
                                }            
                            </format>
                            <args>
                                <arg evaluator="xml" expression="get-property('guid')" />
                                <arg evaluator="xml" expression="get-property('uuid')" />
                                <arg evaluator="xml" expression="get-property('userData')//username/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoTrabajador/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//apellidosEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombresEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//identificacion/text()" />
                                <arg evaluator="xml" expression="get-property('identificacionSupervisor')" />
                                <arg evaluator="xml" expression="get-property('nombreSupervisor')" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoCompania/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreCompania/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoAgrupacion/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoAgrupacion/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoDivision/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreDivision/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoDepartamento/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreDepartamento/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoArea/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreArea/text()" />
                                <arg evaluator="xml" value="X" />
                                <arg evaluator="xml" value="X" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoCentroCosto/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreCentroCosto/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombrelocalidad/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//nombreCargo/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoNivelJerarquico/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoNivelJerarquico/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//numeroCuentaDeposito/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//fechaIngreso/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//fechaSalida/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//estadoEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//codigoEmpleado/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//tipousuario/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//subtipo/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//celular/text()" />
                                <arg evaluator="xml" expression="get-property('origin')" />
                                <arg evaluator="xml" expression="get-property('currentDate')" />
                                <arg evaluator="xml" expression="get-property('currentDate')" />
                                <arg evaluator="xml" expression="get-property('modifyData')" />
                                <arg evaluator="xml" expression="get-property('profileRecalculation')" />
                                <arg evaluator="xml" expression="get-property('action')" />
                                <arg evaluator="xml" expression="get-property('userData')//correoElectronico/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//idPerfilGlobal/text()" />
                                <arg evaluator="xml" expression="get-property('userData')//id/text()" />
                                <arg evaluator="xml" expression="get-property('AES_RESULTS')" />
                                <arg evaluator="xml" expression="get-property('userData')//tipoIdentificacion/text()" />
                            </args>
                        </payloadFactory>
                    </else>
                </filter>
                <call>
                    <endpoint template="HTTPEndpointPostTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/provisioning/TransactionalIdentity" />
                </call>
                <log level="custom">
                    <property name="CreateTransactionaIdentityTemplate" value="1..." />
                </log>
                <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
                    <then>
                        <log level="custom">
                            <property name="CreateTransactionaIdentityTemplate" value="2..." />
                        </log>
                        <store messageStore="RecalculateStore" />
                        <log level="custom">
                            <property name="CreateTransactionaIdentityTemplate" value="3..." />
                        </log>
                    </then>
                    <else>
                        <sequence key="FaultSeq" />
                    </else>
                </filter>
            </then>
            <else>
                <property name="fault" value="Error search user by 'id' " />
                <sequence key="FaultSeq" />
            </else>
        </filter>
        <log level="custom">
            <property name="CreateTransactionaIdentityTemplate" value="Fin..." />
            <property name="X-Forwarded-For" expression="$ctx:X-Forwarded-For" />
            <property name="UserName" expression="$ctx:UserName" />
        </log>
    </sequence>
</template>
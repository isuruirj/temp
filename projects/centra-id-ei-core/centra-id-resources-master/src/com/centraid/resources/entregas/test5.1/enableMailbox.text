function enableMailbox( $file ) {
    Write-Log $LogeLevelDebug "---------- Method: enableMailbox ----------"
    $json = Get-Content $file | Out-String | ConvertFrom-Json
    $msg = "Load data from: " + $file
    
    Write-Log $LogeLevelDebug $msg
    Write-Log $LogeLevelDebug $json

    if (-not ([string]::IsNullOrEmpty($json.identity))) {
        # verify if identity exists 
        $identity = Get-Mailbox $json.identity
        $alias = write-output ($identity | Select -ExpandProperty "Alias")
        
        if (-not ([string]::IsNullOrEmpty($alias))) {
            Write-Log $LogeLevelDebug "Enabling mailbox for:" $alias
            $msg = $alias + " already has a mailbox enabled"
            $Suggestion = "Check if the user " + $alias + " has an enabled mailbox"
            Write-Error-Log $LogeLevelError $ErrorCode_8000 $msg $Suggestion
        }
        else {
            # This catch block will not work because it's non-terminating error.
            # To work catch block use -ErroAction stop.However, it will stop the flow.
            try {
                $msg = "Creating mailbox for: " + $json.Name
                Write-Log $LogeLevelDebug $msg
                $c = -Name $json.Name -UserPrincipalName $json.UserPrincipalName -Password (ConvertTo-SecureString -String $json.Password -AsPlainText -Force ) -FirstName $json.FirstName -LastName $json.LastName
                $msg = "Executing the command: New-Mailbox " + $c
                Write-Log $LogeLevelDebug $msg
                New-Mailbox $c
                $msg = "Mailbox created successfully for:" + $json.Name
                Write-Log $LogeLevelInfo $msg

                # $msg = "Enabling mailbox for: " + $json.identity
                # Write-Log $LogeLevelDebug $msg 
                # $enable = Enable-Mailbox $json.identity -ErrorAction stop
                # $enable = Enable-Mailbox $json.identity
                # Write-Log $LogeLevelDebug $enable 
                $msg = "Applying Tiers for: " + $json.Name
                Write-Log $LogeLevelInfo $msg
                $c = $json.identity + " -IssueWarningQuota " + $json.IssueWarningQuota + " -ProhibitSendQuota " + $json.ProhibitSendQuota + " -ProhibitSendReceiveQuota " + $json.ProhibitSendReceiveQuota + " -UseDatabaseQuotaDefaults " + $json.UseDatabaseQuotaDefaults
                $msg = "Executing the command: Set-Mailbox " + $c
                Write-Log $LogeLevelDebug $msg
                Set-Mailbox $c
                $msg = "Tier applied for: " + $json.Name
                Write-Log $LogeLevelInfo $msg
            }
            catch {
                $ErrorMessage = $_.Exception.Message
                Break
            }
            
        }  
    }
    else {
        Write-Log $LogeLevelInfo "json.identity is null or empty"
    }

    # Move processed data.
    try {
        $msg = "Moving file: " + $file + " to:" + $global:config.path_enable_out
        Write-Log $LogeLevelInfo $msg
        Move-Item -Path $file -Destination $global:config.path_enable_out
    }
    catch {
        $ErrorMessage = $_.Exception.Message
        Write-Error-Log $LogeLevelFatal $ErrorCode_9000 $ErrorMessage
        Break
    }
}
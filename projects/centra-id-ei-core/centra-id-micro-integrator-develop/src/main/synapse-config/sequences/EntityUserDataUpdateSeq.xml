<?xml version="1.0" encoding="UTF-8"?>
<sequence name="UserDataUpdateSeq" onError="FaultSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse" xmlns:ci="centra-id.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:axis2ns65="http://ws.wso2.org/dataservice">
    <log level="custom" category="DEBUG">
        <property name="UserDataUpdateSeq" value="Inicio.." />
        <property name="X-Forwarded-For" expression="$ctx:X-Forwarded-For" />
        <property name="UserName" expression="$ctx:UserName" />
    </log>
    <property name="Content-Encoding" action="remove" scope="transport" />
    <property name="Accept-Encoding" action="remove" scope="transport" />
    <property name="userdata" expression="$body//*" scope="default" type="OM" />
    <property name="userdataId" expression="//userData/id" scope="default" type="STRING" />
    <property name="guid" expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" />
    <property name="uuid" expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" />
    <property name="requiresProvisioning" value="false" type="BOOLEAN" />
    <filter regex="false" source="boolean(get-property('modifyData'))">
        <then>
            <property action="set" name="modifyData" value="1" />
        </then>
    </filter>
    <filter regex="false" source="boolean(get-property('profileRecalculation'))">
        <then>
            <property action="set" name="profileRecalculation" value="0" />
        </then>
    </filter>
    <log level="custom" category="DEBUG">
        <property name="UserDataUpdateSeq" value="Inicio.3." />
        <property name="guid" expression="$ctx:guid" />
        <property name="uuid" expression="$ctx:uuid" />
    </log>
    <property name="uri.var.url" expression="fn:concat($ctx:uri.var.enterpriseIntegratorHost,'/api.centraid/identity/UserDataSimple/',$ctx:userdataId)" />
    <log level="custom" category="DEBUG">
        <property name="UserDataUpdateSeq" value="Inicio.1.0" />
        <property name="userdataId" expression="$ctx:userdataId" />
        <property name="uri.var.url" expression="$ctx:uri.var.url" />
    </log>
    <call>
        <endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.url}" />
    </call>
    <log level="custom" category="DEBUG">
        <property name="UserDataUpdateSeq" value="Inicio.1." />
        <property name="globalProfileId" expression="//globalProfileId/text()" />
        <property name="globalProfileId2" expression="$ctx:userdata//globalProfile/id/text()" />
    </log>
    <!-- Validar cambio de perfil global -->
    <filter regex="false" source="//globalProfileId/text() = $ctx:userdata//globalProfile/id/text()">
        <then>
            <property name="globalProfilePreviusId" expression="//globalProfileId/text()" />
            <property name="profileRecalculation" value="1" />
            <property name="origin" value="Cambio Perfil Global" />
            <property name="requiresProvisioning" value="true" type="BOOLEAN" />
        </then>
    </filter>
    <!-- Valida cambio de centro de costo -->
    <filter regex="false" source="//costCenterId/text() = $ctx:userdata//costCenter/id/text()">
        <then>
            <property name="profileRecalculation" value="1" />
            <property name="origin" value="Cambio de Centro de Costos" />
            <property name="requiresProvisioning" value="true" type="BOOLEAN" />
        </then>
    </filter>
    <log level="custom" category="DEBUG">
        <property name="UserDataUpdateSeq" value="Inicio.2." />
        <property name="globalProfilePreviusId2" expression="$ctx:globalProfilePreviusId" />
    </log>
    <!-- recupera json original -->
    <payloadFactory media-type="json">
        <format>$1</format>
        <args>
            <arg evaluator="xml" expression="get-property('userdata')" />
        </args>
    </payloadFactory>
    <!-- Actualizar filter en trama -->
    <property name="filter" expression="fn:concat(//username,' ',//identification,' ',//employeeCompleteName)" />
    <xslt key="gov:/centra-id/xslt/replaceElement.xsl">
        <property name="element" value="filter" />
        <property name="value" expression="$ctx:filter" />
    </xslt>
    <property name="messageType" scope="axis2" type="STRING" value="application/xml" />
    <property name="Accept" scope="transport" type="STRING" value="application/xml" />
    <xslt key="gov:/centra-id/xslt/jsonFilter.xsl">
        <property value="update" name="operationName" />
        <property value="userData" name="entityName" />
        <property value="users" name="entityNamePlural" />
        <property expression="get-property('userdataId')" name="id" />
    </xslt>
    <call>
        <endpoint template="HTTPEndpointPutTemplate" uri="{uri.var.dataServiceHost}/identity.user-data.ds.HTTPEndpoint/UpdateUserData" />
    </call>
    <property expression="//axis2ns65:DataServiceFault/axis2ns65:ds_code" name="faultCode" scope="default" type="STRING" />
    <filter regex="true" source="boolean(get-property('faultCode'))">
        <then>
            <sequence key="FaultSeq" />
        </then>
        <else>
            <!-- Actualizar usuarios -->
            <property name="uri.var.type" value="U" />
            <store messageStore="IdentityStore" />
            <filter regex="true" source="$ctx:requiresProvisioning">
                <then>
                    <!-- Crear en transactional identity -->
                    <call-template target="CreateTransactionaIdentityTemplate">
                        <with-param name="userDataId" value="{get-property('userdataId')}" />
                        <with-param name="origin" value="{get-property('origin')}" />
                        <with-param name="guid" value="{get-property('guid')}" />
                        <with-param name="uuid" value="{get-property('uuid')}" />
                        <with-param name="action" value="U" />
                        <with-param name="modifyData" value="{get-property('modifyData')}" />
                        <with-param name="profileRecalculation" value="{get-property('profileRecalculation')}" />
                        <with-param name="password" value="X" />
                    </call-template>
                </then>
            </filter>
            <payloadFactory media-type="json">
                <format>{ "userData": { "id": $1 } }</format>
                <args>
                    <arg evaluator="xml" expression="get-property('userdataId')" />
                </args>
            </payloadFactory>
            <property name="HTTP_SC" scope="axis2" type="STRING" value="200" />
        </else>
    </filter>
    <log level="custom" category="DEBUG">
        <property name="UserDataUpdateSeq" value="Fin.." />
        <property name="X-Forwarded-For" expression="$ctx:X-Forwarded-For" />
        <property name="UserName" expression="$ctx:UserName" />
    </log>
</sequence>
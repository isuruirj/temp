<?xml version="1.0" encoding="UTF-8"?>
<sequence name="GetReferenceDataSeq" onError="FaultSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <log level="full" category="INFO">
        <property name="GetReferenceDataSeq" value="Inicio..." />
    </log>
    <property name="messageType" scope="axis2" type="STRING" value="application/xml" />
    <property name="Accept" scope="transport" type="STRING" value="application/xml" />
    <property expression="//identityType/text()" name="identityTypeCode" scope="default" type="STRING" />
    <filter regex="true" source="boolean(//company/text())">
        <then>
            <property expression="//company/text()" name="companyCode" scope="default" type="STRING" />
        </then>
        <else>
            <!--property name="companyCode" scope="default" type="STRING" value="BCPI" /-->
        </else>
    </filter>
    <property expression="//division/text()" name="divisionCode" scope="default" type="STRING" />
    <property expression="//area/text()" name="areaCode" scope="default" type="STRING" />
    <property expression="//department/text()" name="departmentCode" scope="default" type="STRING" />
    <property expression="//position/text()" name="positionCode" scope="default" type="STRING" />
    <filter regex="true" source="boolean(//costCenter/text())">
        <then>
            <property expression="//costCenter/text()" name="costCenterCode" scope="default" type="STRING" />
        </then>
        <else />
    </filter>
    <filter regex="true" source="boolean(//costCenterBank/text())">
        <then>
            <property expression="//costCenterBank/text()" name="costCenterCode" scope="default" type="STRING" />
        </then>
        <else />
    </filter>
    <property expression="//userTypeCode/text()" name="userTypeCode" scope="default" type="STRING" />
    <property expression="//userSubtypeCode/text()" name="userSubtypeCode" scope="default" type="STRING" />
    <property expression="//firstSurname/text()" name="firstSurname" scope="default" type="STRING" />
    <property expression="//secondSurname/text()" name="secondSurname" scope="default" type="STRING" />
    <property expression="//firstName/text()" name="firstName" scope="default" type="STRING" />
    <property expression="//middleName/text()" name="middleName" scope="default" type="STRING" />
    <property expression="//type/text()" name="type" scope="default" type="STRING" />
    <property expression="//profile/text()" name="profile" scope="default" type="STRING" />
    <property expression="//bankCounterpart/text()" name="bankCounterpart" scope="default" type="STRING" />
    <property expression="//supervisionLine/text()" name="supervisionLine" scope="default" type="STRING" />
    <property expression="//responsibleUser/text()" name="responsibleUser" scope="default" type="STRING" />
    <property expression="//typeRotary/text()" name="typeRotary" scope="default" type="STRING" />
    <property expression="//justification/text()" name="justification" scope="default" type="STRING" />
    <!-- NAMES -->
    <filter regex="true" source="boolean(//name/text())">
        <then>
            <property expression="//name/text()" name="names" scope="default" type="STRING" />
        </then>
        <else>
            <filter regex="true" source="boolean($ctx:firstSurname) and boolean($ctx:firstName)">
                <then>
                    <property expression="$ctx:firstSurname" name="names" scope="default" type="STRING" />
                    <filter regex="true" source="boolean($ctx:secondSurname)">
                        <then>
                            <property expression="fn:concat($ctx:names,' ',$ctx:secondSurname)" name="names" scope="default" type="STRING" />
                        </then>
                    </filter>
                    <property expression="fn:concat($ctx:names,' ',$ctx:firstName)" name="names" scope="default" type="STRING" />
                    <filter regex="true" source="boolean($ctx:middleName)">
                        <then>
                            <property expression="fn:concat($ctx:names,' ',$ctx:middleName)" name="names" scope="default" type="STRING" />
                        </then>
                    </filter>
                </then>
            </filter>
        </else>
    </filter>
    <!-- IDENTITY TYPE -->
    <filter regex="true" source="boolean(get-property('identityTypeCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('identityTypeCode')}" />
                <with-param name="type" value="CATALOG" />
                <with-param name="subtype" value="TIPIDE" />
            </call-template>
            <property expression="get-property('name')" name="identityTypeName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- COMPANY -->
    <filter regex="true" source="boolean(get-property('companyCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('companyCode')}" />
                <with-param name="type" value="COMPANY" />
                <with-param name="subtype" value="X" />
            </call-template>
            <property expression="get-property('name')" name="companyName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- DIVISION -->
    <filter regex="true" source="boolean(get-property('divisionCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('divisionCode')}" />
                <with-param name="type" value="CATALOG" />
                <with-param name="subtype" value="DIV" />
            </call-template>
            <property expression="get-property('name')" name="divisionName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- AREA -->
    <filter regex="true" source="boolean(get-property('areaCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('areaCode')}" />
                <with-param name="type" value="CATALOG" />
                <with-param name="subtype" value="ARE" />
            </call-template>
            <property expression="get-property('name')" name="areaName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- DEPARTAMENT -->
    <filter regex="true" source="boolean(get-property('departmentCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('departmentCode')}" />
                <with-param name="type" value="CATALOG" />
                <with-param name="subtype" value="DEP" />
            </call-template>
            <property expression="get-property('name')" name="departmentName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- POSITION -->
    <filter regex="true" source="boolean(get-property('positionCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('positionCode')}" />
                <with-param name="type" value="CATALOG" />
                <with-param name="subtype" value="CAR" />
            </call-template>
            <property expression="get-property('name')" name="positionName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- COST CENTER -->
    <filter regex="true" source="boolean(get-property('costCenterCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('costCenterCode')}" />
                <with-param name="type" value="COST_CENTER" />
                <with-param name="subtype" value="BCPI" />
            </call-template>
            <property expression="get-property('name')" name="costCenterName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- TYPE USER -->
    <filter regex="true" source="boolean(get-property('userTypeCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('userTypeCode')}" />
                <with-param name="type" value="TYPE_USER" />
                <with-param name="subtype" value="T" />
            </call-template>
            <property expression="get-property('name')" name="userTypeName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- SUBTYPE USER -->
    <filter regex="true" source="boolean(get-property('userSubtypeCode'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('userSubtypeCode')}" />
                <with-param name="type" value="TYPE_USER" />
                <with-param name="subtype" value="S" />
            </call-template>
            <property expression="get-property('name')" name="userSubtypeName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- GLOBAL PROFILE -->
    <filter regex="true" source="boolean(get-property('profile'))">
        <then>
            <call-template target="FindCatalogsSeqTemplate">
                <with-param name="code" value="{get-property('profile')}" />
                <with-param name="type" value="GLOBAL_PROFILE" />
                <with-param name="subtype" value="X" />
            </call-template>
            <property expression="get-property('name')" name="globalProfileName" scope="default" type="STRING" />
        </then>
    </filter>
    <!-- USERDATA -->
    <filter regex="true" source="boolean($ctx:supervisionLine)">
        <then>
            <property expression="$ctx:supervisionLine" name="uri.var.employeeCode" scope="default" type="STRING" />
            <call>
                <endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/UserDataSimple/0/1?employeeCode={uri.var.employeeCode}" />
            </call>
            <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
                <then>
                    <property expression="//employeeCompleteName" name="userDatasupervisionLineName" scope="default" type="STRING" />
                    <property expression="//username" name="userDatasupervisionLineUsername" scope="default" type="STRING" />
                    <property expression="//identification" name="userDatasupervisionLineIdentification" scope="default" type="STRING" />
                    <property expression="//id" name="userDatasupervisionLineId" scope="default" type="STRING" />
                </then>
                <else>
                    <property name="fault" scope="default" type="STRING" value="Error get supervision lone" />
                    <sequence key="FaultSeq" />
                </else>
            </filter>
        </then>
        <else />
    </filter>
    <filter regex="true" source="boolean($ctx:bankCounterpart)">
        <then>
            <property expression="$ctx:bankCounterpart" name="uri.var.employeeCode" scope="default" type="STRING" />
            <call>
                <endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/UserDataSimple/0/1?employeeCode={uri.var.employeeCode}" />
            </call>
            <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
                <then>
                    <property expression="//employeeCompleteName/text()" name="userDataBankCountertPartName" scope="default" type="STRING" />
                    <property expression="//username/text()" name="userDataBankCountertPartUsername" scope="default" type="STRING" />
                    <property expression="//identification/text()" name="userDataBankCountertPartIdentification" scope="default" type="STRING" />
                    <property expression="//id/text()" name="userDataBankCountertPartId" scope="default" type="STRING" />
                </then>
                <else>
                    <property name="fault" scope="default" type="STRING" value="Error get bankCounterpart lone" />
                    <sequence key="FaultSeq" />
                </else>
            </filter>
        </then>
        <else />
    </filter>
    <filter regex="true" source="boolean($ctx:responsibleUser)">
        <then>
            <property expression="$ctx:responsibleUser" name="uri.var.employeeCode" scope="default" type="STRING" />
            <call>
                <endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/UserDataSimple/0/1?employeeCode={uri.var.employeeCode}" />
            </call>
            <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
                <then>
                    <property expression="//employeeCompleteName/text()" name="userDataResponsibleUserName" scope="default" type="STRING" />
                    <property expression="//username/text()" name="userDataResponsibleUserUsername" scope="default" type="STRING" />
                    <property expression="//identification/text()" name="userDataResponsibleUserIdentification" scope="default" type="STRING" />
                    <property expression="//id/text()" name="userDataResponsibleUserId" scope="default" type="STRING" />
                </then>
                <else>
                    <property name="fault" scope="default" type="STRING" value="Error get bankCounterpart lone" />
                    <sequence key="FaultSeq" />
                </else>
            </filter>
        </then>
        <else />
    </filter>
    <payloadFactory media-type="json">
        <format>
            $1
        </format>
        <args>
            <arg evaluator="xml" expression="get-property('json')" />
        </args>
    </payloadFactory>
    <filter regex="true" source="boolean($ctx:identityTypeName)">
        <then>
            <property name="element" expression="fn:concat('&lt;identityTypeName&gt;',$ctx:identityTypeName,'&lt;/identityTypeName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:companyName)">
        <then>
            <property name="element" expression="fn:concat('&lt;companyName&gt;',$ctx:companyName,'&lt;/companyName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:divisionName)">
        <then>
            <property name="element" expression="fn:concat('&lt;divisionName&gt;',$ctx:divisionName,'&lt;/divisionName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:areaName)">
        <then>
            <property name="element" expression="fn:concat('&lt;areaName&gt;',$ctx:areaName,'&lt;/areaName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:departmentName)">
        <then>
            <property name="element" expression="fn:concat('&lt;departmentName&gt;',$ctx:departmentName,'&lt;/departmentName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:positionName)">
        <then>
            <property name="element" expression="fn:concat('&lt;positionName&gt;',$ctx:positionName,'&lt;/positionName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:costCenterName)">
        <then>
            <property name="element" expression="fn:concat('&lt;costCenterName&gt;',$ctx:costCenterName,'&lt;/costCenterName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userTypeName)">
        <then>
            <property name="element" expression="fn:concat('&lt;userTypeName&gt;',$ctx:userTypeName,'&lt;/userTypeName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userSubtypeName)">
        <then>
            <property name="element" expression="fn:concat('&lt;userSubtypeName&gt;',$ctx:userSubtypeName,'&lt;/userSubtypeName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:names)">
        <then>
            <property name="element" expression="fn:concat('&lt;names&gt;',$ctx:names,'&lt;/names&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:type)">
        <then>
            <property name="element" expression="fn:concat('&lt;type&gt;',$ctx:type,'&lt;/type&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:globalProfileName)">
        <then>
            <property name="element" expression="fn:concat('&lt;profileName&gt;',$ctx:globalProfileName,'&lt;/profileName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:supervisionLine)">
        <then>
            <property name="element" expression="fn:concat('&lt;supervisionLine&gt;',$ctx:supervisionLine,'&lt;/supervisionLine&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDatasupervisionLineName)">
        <then>
            <property name="element" expression="fn:concat('&lt;supervisionLineName&gt;',$ctx:userDatasupervisionLineName,'&lt;/supervisionLineName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDatasupervisionLineUsername)">
        <then>
            <property name="element" expression="fn:concat('&lt;supervisionLineUsername&gt;',$ctx:userDatasupervisionLineUsername,'&lt;/supervisionLineUsername&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDatasupervisionLineIdentification)">
        <then>
            <property name="element" expression="fn:concat('&lt;supervisionLineIdentification&gt;',$ctx:userDatasupervisionLineIdentification,'&lt;/supervisionLineIdentification&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDatasupervisionLineId)">
        <then>
            <property name="element" expression="fn:concat('&lt;supervisionLineId&gt;',$ctx:userDatasupervisionLineId,'&lt;/supervisionLineId&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:bankCounterpart)">
        <then>
            <property name="element" expression="fn:concat('&lt;bankCounterpart&gt;',$ctx:bankCounterpart,'&lt;/bankCounterpart&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataBankCountertPartName)">
        <then>
            <property name="element" expression="fn:concat('&lt;bankCounterpartName&gt;',$ctx:userDataBankCountertPartName,'&lt;/bankCounterpartName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataBankCountertPartUsername)">
        <then>
            <property name="element" expression="fn:concat('&lt;bankCounterpartUsername&gt;',$ctx:userDataBankCountertPartUsername,'&lt;/bankCounterpartUsername&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataBankCountertPartIdentification)">
        <then>
            <property name="element" expression="fn:concat('&lt;bankCounterpartIdentificacion&gt;',$ctx:userDataBankCountertPartIdentification,'&lt;/bankCounterpartIdentificacion&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataBankCountertPartId)">
        <then>
            <property name="element" expression="fn:concat('&lt;bankCounterpartId&gt;',$ctx:userDataBankCountertPartId,'&lt;/bankCounterpartId&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:responsibleUser)">
        <then>
            <property name="element" expression="fn:concat('&lt;responsibleUser&gt;',$ctx:responsibleUser,'&lt;/responsibleUser&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataResponsibleUserName)">
        <then>
            <property name="element" expression="fn:concat('&lt;responsibleUserName&gt;',$ctx:userDataResponsibleUserName,'&lt;/responsibleUserName&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataResponsibleUserUsername)">
        <then>
            <property name="element" expression="fn:concat('&lt;responsibleUserUsername&gt;',$ctx:userDataResponsibleUserUsername,'&lt;/responsibleUserUsername&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataResponsibleUserIdentification)">
        <then>
            <property name="element" expression="fn:concat('&lt;responsibleUserIdentification&gt;',$ctx:userDataResponsibleUserIdentification,'&lt;/responsibleUserIdentification&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:userDataResponsibleUserId)">
        <then>
            <property name="element" expression="fn:concat('&lt;responsibleUserId&gt;',$ctx:userDataResponsibleUserId,'&lt;/responsibleUserId&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <filter regex="true" source="boolean($ctx:justification)">
        <then>
            <property name="element" expression="fn:concat('&lt;justification&gt;',$ctx:justification,'&lt;/justification&gt;')" type="OM" />
            <enrich>
                <source clone="true" xpath="$ctx:element" />
                <target action="child" xpath="//jsonObject" />
            </enrich>
        </then>
    </filter>
    <log level="full" category="INFO">
        <property name="GetReferenceDataSeq" value="Fin..." />
    </log>
</sequence>
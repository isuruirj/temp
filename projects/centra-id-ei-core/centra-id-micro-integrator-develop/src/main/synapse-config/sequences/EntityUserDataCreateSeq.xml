<?xml version="1.0" encoding="UTF-8"?>
<sequence name="UserDataCreateSeq" onError="FaultSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse" xmlns:ci="centra-id.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:axis2ns65="http://ws.wso2.org/dataservice">
    <property name="X-Forwarded-For" expression="get-property('transport','X-Forwarded-For')" />
    <property name="UserName" expression="get-property('transport','UserName')" />
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.." />
        <property name="X-Forwarded-For" expression="$ctx:X-Forwarded-For" />
        <property name="UserName" expression="$ctx:UserName" />
    </log>
    <!-- Respaldar datos originales -->
    <property expression="json-eval($)" name="userData" scope="default" type="STRING" />
    <property name="employeeCode" expression="//employeeCode" />
    <property name="mail" expression="//mail" />
    <property name="uri.var.companyId" expression="//company/id" />
    <property name="uri.var.typeUserId" expression="//typeUser/id" />
    <property name="uri.var.subtypeUserId" expression="//subtypeUser/id" />
    <property name="uri.var.costCenterId" expression="//costCenter/id" />
    <property name="uri.var.typeRotary" expression="//typeRotary" />
    <property name="guid" expression="//guid" />
    <filter regex="false" source="boolean(get-property('guid'))">
        <then>
            <property action="set" name="guid" expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" />
        </then>
    </filter>
    <property name="uuid" expression="//uuid" />
    <filter regex="false" source="boolean(get-property('uuid'))">
        <then>
            <property action="set" name="uuid" expression="fn:substring-after(get-property('MessageID'), 'urn:uuid:')" />
        </then>
    </filter>
    <property name="origin" expression="//origin" />
    <filter regex="false" source="boolean(get-property('origin'))">
        <then>
            <property action="set" name="origin" value="Manual" />
        </then>
    </filter>
    <log level="custom" category="DEBUG">
        <property name="employeeCode" expression="get-property('employeeCode')" />
        <property name="uri.var.companyId" expression="get-property('uri.var.companyId')" />
        <property name="origin" expression="get-property('origin')" />
    </log>
    <!-- Calcular username -->
    <property name="firstName" expression="//employeeFirstName/text()" />
    <filter regex="true" source="boolean(//employeeSecondName/text())">
        <then>
            <property name="firstName" expression="fn:concat($ctx:firstName,' ',//employeeSecondName/text())" />
        </then>
    </filter>
    <property name="lastName" expression="//employeeFirstSurname" />
    <filter regex="true" source="boolean(//employeeSecondSurname/text())">
        <then>
            <property name="lastName" expression="fn:concat($ctx:lastName,' ',//employeeSecondSurname/text())" />
        </then>
    </filter>
    <sequence key="GenerateUsernamePasswordSeq" />
    <!-- Calcular mail -->
    <filter regex="true" source="get-property('mail')='X'">
        <then>
            <call>
                <endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/company/Company?id={uri.var.companyId}" />
            </call>
            <property name="mail" expression="fn:concat(get-property('username'),'@',//company/domainName)" />
        </then>
    </filter>
    <!-- recupera json original -->
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.2." />
        <property name="userData" expression="get-property('userData')"></property>
    </log>
    <payloadFactory media-type="json">
        <format>$1</format>
        <args>
            <arg evaluator="xml" expression="get-property('userData')" />
        </args>
    </payloadFactory>
    <!-- Actualizar username en trama -->
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.3." />
    </log>
    <enrich>
        <source type="property" clone="true" property="username" />
        <target action="replace" type="custom" xpath="//username/text()" />
    </enrich>
    <!-- Actualizar mail en trama -->
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.4." />
    </log>
    <enrich>
        <source type="property" clone="true" property="mail" />
        <target action="replace" type="custom" xpath="//mail/text()" />
    </enrich>
    <!-- Actualizar filter en trama -->
    <property name="filter" expression="fn:concat(//username,' ',//identification,' ',//employeeCompleteName)" />
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.7.0." />
        <property name="filter" expression="$ctx:filter" />
    </log>
    <xslt key="gov:/centra-id/xslt/replaceElement.xsl">
        <property name="element" value="filter" />
        <property name="value" expression="$ctx:filter" />
    </xslt>
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.7.1." />
        <property name="filter" expression="$ctx:filter" />
    </log>
    <!-- Actualizar counter generic rotary -->
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.6." />
    </log>
    <filter regex="true" source="boolean($ctx:counterGenericRotary)">
        <then>
            <enrich>
                <source type="property" clone="true" property="counterGenericRotary" />
                <target action="replace" type="custom" xpath="//counterGenericRotary/text()" />
            </enrich>
        </then>
    </filter>
    <!-- Actualizar counter generic mail -->
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.7." />
    </log>
    <filter regex="true" source="boolean($ctx:counterGenericMail)">
        <then>
            <enrich>
                <source type="property" clone="true" property="counterGenericMail" />
                <target action="replace" type="custom" xpath="//counterGenericMail/text()" />
            </enrich>
        </then>
    </filter>
    <!-- transformar-->
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio.8." />
    </log>
    <property name="messageType" scope="axis2" type="STRING" value="application/xml" />
    <property name="Accept" scope="transport" type="STRING" value="application/xml`" />
    <xslt key="gov:/centra-id/xslt/jsonFilter.xsl">
        <property value="insert" name="operationName" />
        <property value="userData" name="entityName" />
        <property value="users" name="entityNamePlural" />
    </xslt>
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Inicio..9" />
    </log>
    <call>
        <endpoint template="HTTPEndpointPostTemplate" uri="{uri.var.dataServiceHost}/identity.user-data.ds.HTTPEndpoint/CreateUserData" />
    </call>
    <property expression="//ci:Entry/ci:id" name="userdataId" scope="default" type="STRING" />
    <filter regex="true" source="boolean(get-property('userdataId'))">
        <then>
            <!-- Crear usuario en IS -->
            <property name="uri.var.type" value="C" />
            <store messageStore="IdentityStore" />
            <!-- Crear en transactional identity -->
            <log level="custom" category="DEBUG">
                <property name="employeeCode.2" expression="get-property('employeeCode')" />
            </log>
            <property name="uri.var.type" value="C" />
            <store messageStore="IdentityStore" />
            <call-template target="CreateTransactionaIdentityTemplate">
                <with-param name="userDataId" value="{get-property('userdataId')}" />
                <with-param name="origin" value="{get-property('origin')}" />
                <with-param name="guid" value="{get-property('guid')}" />
                <with-param name="uuid" value="{get-property('uuid')}" />
                <with-param name="action" value="C" />
                <with-param name="modifyData" value="1" />
                <with-param name="profileRecalculation" value="1" />
                <with-param name="password" value="{get-property('password')}" />
            </call-template>
            <log level="custom" category="DEBUG">
                <property name="employeeCode.3" expression="get-property('employeeCode')" />
            </log>
            <!-- Responder -->
            <payloadFactory media-type="json">
                <format>{ "userData": { "id": $1,"username": "$2" } }</format>
                <args>
                    <arg evaluator="xml" expression="get-property('userdataId')" />
                    <arg evaluator="xml" expression="get-property('username')" />
                </args>
            </payloadFactory>
            <property name="HTTP_SC" scope="axis2" type="STRING" value="200" />
        </then>
        <else>
            <sequence key="FaultSeq" />
        </else>
    </filter>
    <log level="custom" category="DEBUG">
        <property name="UserDataCreateSeq" value="Fin.." />
        <property name="X-Forwarded-For" expression="$ctx:X-Forwarded-For" />
        <property name="UserName" expression="$ctx:UserName" />
    </log>
</sequence>
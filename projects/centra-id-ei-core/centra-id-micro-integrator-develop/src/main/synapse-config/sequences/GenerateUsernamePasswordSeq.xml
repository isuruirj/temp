<?xml version="1.0" encoding="UTF-8"?>
<sequence name="GenerateUsernamePasswordSeq" onError="FaultUserDataSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse" xmlns:cen="centra-id.com">
	<log level="custom" category="DEBUG">
		<property name="GenerateUsernamePasswordSeq" value="Inicio..." />
		<property name="lastName" expression="get-property('lastName')" />
		<property name="firstName" expression="get-property('firstName')" />
		<property name="uri.var.typeUserId" expression="get-property('uri.var.typeUserId')" />
		<property name="uri.var.subtypeUserId" expression="get-property('uri.var.subtypeUserId')" />
	</log>
	<!-- Recuperar parametros para la generacion de username y password -->
	<call>
		<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/common/GlobalParameter" />
	</call>
	<filter regex="200" source="get-property('axis2', 'HTTP_SC')">
		<then>
			<property name="globalParameters" expression="$body//*" scope="default" type="OM" />
			<property name="LONGITUD_USUARIOS" expression="$ctx:globalParameters//globalParameter[code[contains(text(), 'LONUSUNUE')]]/valueNumber/text()" />
			<property name="LONGITUD_PASSWORD" expression="$ctx:globalParameters//globalParameter[code[contains(text(), 'LONMINCON')]]/valueNumber/text()" />
			<property name="LETRAS_MAYUSCULAS" expression="$ctx:globalParameters//globalParameter[code[contains(text(), 'NUMILEMICON')]]/valueNumber/text()" />
			<property name="LETRAS_MINUSCULAS" expression="$ctx:globalParameters//globalParameter[code[contains(text(), 'NUMILEMACON')]]/valueNumber/text()" />
			<property name="NUMEROS" expression="$ctx:globalParameters//globalParameter[code[contains(text(), 'NUMINUCON')]]/valueNumber/text()" />
			<property name="ESPECIALES" expression="$ctx:globalParameters//globalParameter[code[contains(text(), 'NUMIESCON')]]/valueNumber/text()" />
		</then>
		<else>
			<property name="fault" value="Error get GlobalParameter" />
			<sequence key="FaultSeq" />
		</else>
	</filter>
	<!-- Verificar tipo de usuario -->
	<call>
		<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/TypeUser/{uri.var.typeUserId}" />
	</call>
	<filter regex="true" source="//typeUserList/typeUser/code = 'PER'">
		<then>
			<!-- Calcula a PERSONA-->
			<script language="js">
				<![CDATA[
				function clear( s ) {
					var r=s.toLowerCase();  
					r = r.replace(new RegExp(/ñ/g),"n");      
				    r = r.replace(new RegExp(/[àáâãäå]/g),"a");
					r = r.replace(new RegExp(/[èéêë]/g),"e");
					r = r.replace(new RegExp(/[ìíîï]/g),"i");
					r = r.replace(new RegExp(/[òóôõö]/g),"o");
					r = r.replace(new RegExp(/[ùúûü]/g),"u");
					return r;
				}
				var log = mc.getServiceLog(); 
				log.debug("username.1")
				var apellidos = String(mc.getProperty("lastName")).trim();
				var nombres = String(mc.getProperty("firstName")).trim();
				var longitudUsername = parseInt(mc.getProperty("LONGITUD_USUARIOS"));

				log.debug("username: "+apellidos+" : "+nombres + " : "+longitudUsername);

				// generar username 1
				var username1 = String(nombres.toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()).trim() ;
				log.debug("username1.1: "+username1);
				username1 = username1.toString().substr(0,longitudUsername);
				log.debug("username1.2: "+username1);
				username1 = username1.split(" ").join("");		
				log.debug("username1.3: "+username1);

				mc.setProperty('uri.var.username1',clear(username1));

				log.debug("username.3: "+username1);

				// generar username 2
				log.debug("username.3.0: "+nombres+ " : " + apellidos);
				var username2="";
				if(nombres.split(" ")[1]) {
				    username2 = String(nombres.toString().substr(0,1).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()).trim()  ;
				} else {
					username2 = String(nombres.toString().substr(0,1).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()).trim()  ;
				}
				log.debug("username.3.1: "+username2);
				username2 = username2.toString().substr(0,longitudUsername);
				log.debug("username.3.2: "+username2);
				username2 = username2.split(" ").join("");		
				log.debug("username.3.3: "+username2);
				mc.setProperty('uri.var.username2',clear(username2));

				log.debug("username.4: "+username2);
				
				// generar username 3
				var username3="";
				if(nombres.split(" ")[1] && apellidos.split(" ")[1]) {
					 username3 = String(nombres.toString().substr(0,1).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[1].toString().substr(0,1).toLowerCase()).trim();
				} else {
                     username3 = String(nombres.toString().substr(0,1).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[0].toString().substr(0,1).toLowerCase()).trim();					
				}
				username3 = username3.toString().substr(0,longitudUsername);
				username3 = username3.split(" ").join("");		
				mc.setProperty('uri.var.username3',clear(username3));
				log.debug("username.5: "+username3);
				
				// generar username 4
				var username4="";
				if(nombres.split(" ")[1] && apellidos.split(" ")[1]) {
  				    username4 = String(nombres.toString().substr(0,2).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[1].toString().substr(0,1).toLowerCase()).trim();
				} else {
  				    username4 = String(nombres.toString().substr(0,2).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[0].toString().substr(0,1).toLowerCase()).trim();
				}
				username4 = username4.toString().substr(0,longitudUsername);
				username4 = username4.split(" ").join("");		
				mc.setProperty('uri.var.username4',clear(username4));

				log.debug("username.6: "+username4);		
				
				// generar username 5
				var username5="";
	            if(nombres.split(" ")[1] && apellidos.split(" ")[1]) {				
					username5 = String(nombres.toString().substr(0,3).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[1].toString().substr(0,1).toLowerCase()).trim();
				} else {
					username5 = String(nombres.toString().substr(0,3).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[0].toString().substr(0,1).toLowerCase()).trim();
				}
				
				username5 = username5.toString().substr(0,longitudUsername);
				username5 = username5.split(" ").join("");		
				mc.setProperty('uri.var.username5',clear(username5));

				log.debug("username.7: "+username5);
				
				// generar username 6
				var username6="";
	            if(nombres.split(" ")[1] && apellidos.split(" ")[1]) {				
                    username6 = String(nombres.toString().substr(0,4).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[1].toString().substr(0,1).toLowerCase()).trim();
				} else {
					username6 = String(nombres.toString().substr(0,4).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[0].toString().substr(0,1).toLowerCase()).trim();
				}
				username6 = username6.toString().substr(0,longitudUsername);
				username6 = username6.split(" ").join("");		
				mc.setProperty('uri.var.username6',clear(username6));

				log.debug("username.8: "+username6);

				
				// generar username 7
				var username7="";
	            if(nombres.split(" ")[1] && apellidos.split(" ")[1]) {
					username7 = String(nombres.toString().substr(0,5).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[1].toString().substr(0,1).toLowerCase()).trim();
				} else {
				    username7 = String(nombres.toString().substr(0,5).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[0].toString().substr(0,1).toLowerCase()).trim();	
				}				
				username7 = username7.toString().substr(0,longitudUsername);
				username7 = username7.split(" ").join("");		
				mc.setProperty('uri.var.username7',clear(username7));		

				log.debug("username.9: "+username7);
				
				// generar username 8
				var username8="";
	            if(nombres.split(" ")[1] && apellidos.split(" ")[1]) {
                   username8 = String(nombres.toString().substr(0,6).toLowerCase()+nombres.split(" ")[1].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[1].toString().substr(0,1).toLowerCase()).trim();
				} else {
                   username8 = String(nombres.toString().substr(0,6).toLowerCase()+nombres.split(" ")[0].toString().substr(0,1).toLowerCase()+apellidos.split(" ")[0].toLowerCase()+apellidos.split(" ")[0].toString().substr(0,1).toLowerCase()).trim();
				}
				username8 = username8.toString().substr(0,longitudUsername);
				username8 = username8.split(" ").join("");
				mc.setProperty('uri.var.username8',clear(username8));

				log.debug("username.10: "+username8);
				
				
				]]>
			</script>
			<log level="custom" category="DEBUG">
				<property expression="get-property('uri.var.username1')" name="username1" />
				<property expression="get-property('uri.var.username2')" name="username2" />
				<property expression="get-property('uri.var.username3')" name="username3" />
				<property expression="get-property('uri.var.username4')" name="username4" />
				<property expression="get-property('uri.var.username5')" name="username5" />
				<property expression="get-property('uri.var.username6')" name="username6" />
				<property expression="get-property('uri.var.username7')" name="username7" />
				<property expression="get-property('uri.var.username8')" name="username8" />
			</log>
			<property action="remove" name="REST_URL_POSTFIX" scope="axis2" />
			<property action="remove" name="Content-Type" scope="transport" />
			<call>
				<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.dataServiceHost}/UsersDSS.HTTPEndpoint/getUserByUsername?username1={uri.var.username1}&amp;username2={uri.var.username2}&amp;username3={uri.var.username3}&amp;username4={uri.var.username4}&amp;username5={uri.var.username5}&amp;username6={uri.var.username6}&amp;username7={uri.var.username7}&amp;username8={uri.var.username8}" />
			</call>
			<property expression="//cen:Users/cen:User[1]/cen:username" name="username" scope="default" type="STRING" />
			<!-- calcular password -->
			<script language="js">
				<![CDATA[
					var log = mc.getServiceLog();  
     				var longitudPassword = parseInt(mc.getProperty("LONGITUD_PASSWORD"));
				    var mayusculas = parseInt(mc.getProperty("LETRAS_MAYUSCULAS"));
				    var minusculas = parseInt(mc.getProperty("LETRAS_MINUSCULAS"));
				    var numeros = parseInt(mc.getProperty("NUMEROS"));
				    var especiales = parseInt(mc.getProperty("ESPECIALES"));

					function passwordGenerator( len ) {
						var length = (len)?(len):(10);
						var stringUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //to upper 
						var stringLower = "abcdefghijklmnopqrstuvwxyz"; //to upper 
						var numeric = '0123456789';
						var punctuation = '!@#$%&';
						var password = "";
						log.debug('len: '+len);

						// Selecciona mayusculas
						for (i = 0; i < mayusculas; i++) {
							entity = Math.ceil(stringUpper.length * Math.random()*Math.random());
							password+=stringUpper.charAt( entity );
						}
						log.debug('1:' + password);
						// Selecciona minusculas
						for (i = 0; i < minusculas; i++) {
							entity = Math.ceil(stringLower.length * Math.random()*Math.random());
							password+=stringLower.charAt( entity );
						}
						log.debug('2:' + password);
						// Selecciona numeros
						for (i = 0; i < numeros; i++) {
							entity = Math.ceil(numeric.length * Math.random()*Math.random());
							password+=numeric.charAt( entity );
						}
						log.debug('3:' + password+ ' : ' + especiales);
						// Selecciona especiales
						for (i = 0; i < especiales; i++) {
							entity = Math.ceil(punctuation.length * Math.random()*Math.random());
							password+=punctuation.charAt( entity );
						}
						log.debug('4:' + password);
						if (password.length < len) {
							log.info('4:' + password+' : '+len);
							for (i = 0; i <= (len - password.length)+1; i++) {
								entity = Math.ceil(stringLower.length * Math.random() * Math.random())
								password += stringLower.charAt(entity)
							}
						}
						log.debug('5:' + password);
						password=password.split('').sort(function(){return 0.5-Math.random()}).join('');
						log.debug('6:' + password);
						return password;
					}
					log.info("Generar password: "+longitudPassword);     
					var password = passwordGenerator(longitudPassword);            
					log.info(password);
					mc.setProperty('password',password);
				]]>
			</script>
		</then>
		<else>
			<!-- Calcular a GENERICO -->
			<call>
				<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/TypeUser/{uri.var.subtypeUserId}" />
			</call>
			<switch source="//typeUserList/typeUser/code">
				<case regex="ROT">
					<!-- totaliza usuario generico rotativos -->
					<log level="custom" category="DEBUG">
						<property name="GenerateUsernamePasswordSeq" value="Inicio.GENERICO ROTATIVO.." />
					</log>
					<call>
						<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/company/CostCenter/{uri.var.costCenterId}" />
					</call>
					<property name="uri.var.costCenterCode" expression="//costCenterList/costCenter/code" />
					<call>
						<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/UserDataSearch/max/counter_generic_rotary?subtipo=ROT&amp;codigoCentroCosto={uri.var.costCenterCode}&amp;tipoRotativo={uri.var.typeRotary}" />
					</call>
					<filter regex="true" source="boolean(//max/@nil)">
						<then>
							<property name="count" value="0" type="INTEGER" />
						</then>
						<else>
							<property name="count" expression="//max" type="INTEGER" />
						</else>
					</filter>
					<script language="js">
						<![CDATA[
							var log = mc.getServiceLog();   

							function pad(num, size) {
 								   var s = "000000000" + num;
    								return s.substr(s.length-size);
							}
							var count = parseInt(mc.getProperty("count"))+1;
							var seq = pad(count,2);      
							var code =  mc.getProperty("uri.var.costCenterCode")      
							var typeRotary =  mc.getProperty("uri.var.typeRotary")      
							
							var username = String(typeRotary + code + seq) ;
							mc.setProperty("username",username.toLowerCase());
							mc.setProperty("password",username.toLowerCase());
							mc.setProperty("counterGenericRotary",seq);
							log.debug('username:'+mc.getProperty('username'));
							log.debug('counterGenericRotary:'+mc.getProperty('counterGenericRotary'));
						]]>
					</script>
					<log level="custom" category="DEBUG">
						<property name="GenerateUsernamePasswordSeq" value="Inicio.GENERICO ROTATIVO.2." />
						<property name="username" expression="get-property('username')" />
					</log>
				</case>
				<case regex="MAIL">
					<!-- totaliza usuario generico correo electronico -->
					<log level="custom" category="DEBUG">
						<property name="GenerateUsernamePasswordSeq" value="Inicio.GENERICO CORREO.." />
					</log>
					<call>
						<endpoint template="HTTPEndpointGetTemplate" uri="{uri.var.enterpriseIntegratorHost}/api.centraid/identity/UserDataSearch/max/counter_generic_mail?subtipo=MAIL" />
					</call>
					<filter regex="true" source="boolean(//max/@nil)">
						<then>
							<property name="count" value="0" type="INTEGER" />
						</then>
						<else>
							<property name="count" expression="//max" type="INTEGER" />
						</else>
					</filter>
					<script language="js">
						<![CDATA[
							var log = mc.getServiceLog();       
							function pad(num, size) {
 								   var s = "000000000" + num;
    								return s.substr(s.length-size);
							}
							function passwordGenerator( len ) {
								var length = (len)?(len):(10);
								var stringUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //to upper 
								var stringLower = "abcdefghijklmnopqrstuvwxyz"; //to upper 
								var numeric = '0123456789';
								var punctuation = '!@#$%&';
								var password = "";
								log.debug('len: '+len);

								// Selecciona mayusculas
								for (i = 0; i < mayusculas; i++) {
									entity = Math.ceil(stringUpper.length * Math.random()*Math.random());
									password+=stringUpper.charAt( entity );
								}
								log.debug('1:' + password);
								// Selecciona minusculas
								for (i = 0; i < minusculas; i++) {
									entity = Math.ceil(stringLower.length * Math.random()*Math.random());
									password+=stringLower.charAt( entity );
								}
								log.debug('2:' + password);
								// Selecciona numeros
								for (i = 0; i < numeros; i++) {
									entity = Math.ceil(numeric.length * Math.random()*Math.random());
									password+=numeric.charAt( entity );
								}
								log.debug('3:' + password+ ' : ' + especiales);
								// Selecciona especiales
								for (i = 0; i < especiales; i++) {
									entity = Math.ceil(punctuation.length * Math.random()*Math.random());
									password+=punctuation.charAt( entity );
								}
								log.debug('4:' + password);
								if (password.length < len) {
									log.info('4:' + password+' : '+len);
									for (i = 0; i <= (len - password.length)+1; i++) {
										entity = Math.ceil(stringLower.length * Math.random() * Math.random())
										password += stringLower.charAt(entity)
									}
								}
								log.debug('5:' + password);
								password=password.split('').sort(function(){return 0.5-Math.random()}).join('');
								log.debug('6:' + password);
								return password;
							}

							log.debug("Calculando username");
							var count = parseInt(mc.getProperty("count")) + 1;
							var seq = pad(count,4);      
							var username = String("uspc" + seq) ;
							log.debug("Calculando username1: "+ username);
							mc.setProperty("username",username.toLowerCase());
							var password = passwordGenerator(12);            
							mc.setProperty("password",password);
							mc.setProperty("counterGenericMail",seq);
							log.debug('username:'+mc.getProperty('username'));
							log.debug('password:'+mc.getProperty('password'));							
							log.debug('counterGenericMail:'+mc.getProperty('counterGenericMail'));
						]]>
					</script>
				</case>
				<default>
					<property name="fault" value="Type of user not supported  " />
					<sequence key="FaultSeq" />
				</default>
			</switch>
		</else>
	</filter>
	<log level="custom" category="DEBUG">
		<property name="GenerateUsernamePasswordSeq" value="Fin..." />
		<property expression="get-property('username')" name="username" />
		<property expression="get-property('password')" name="password" />
	</log>
</sequence>
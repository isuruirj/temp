<?xml version="1.0" encoding="UTF-8"?>
<sequence name="GISCIM_AD_Assign_Role_Seq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <log description="seq" level="custom">
        <property name="Seq" value="---------- GISCIM_AD_Assign_Role_Seq ---------- "/>
    </log>
    <sequence key="GIGetRoleNames_Seq"/>
    <property description="newRoles" name="newRoles" scope="default" type="STRING" value=""/>
    <property description="rolesForTicket" name="rolesForTicket" scope="default" type="STRING" value=""/>
    
    <property name="tmpRequestedRoles" expression="concat(',' , $ctx:role , ',')" />
    <property name="rolesForTicket" expression="$ctx:tmpRequestedRoles" />
    <foreach expression="$body/um:getRoleNamesResponse/um:return" xmlns:um="http://service.ws.um.carbon.wso2.org">
    	<sequence>
    		<property name="localRoleNameWithWrapper" expression="concat(',', substring($body/um:return/text(), string-length($ctx:aplicacion)+2) ,',')" />
    		<filter xpath="fn:starts-with($body/um:return/text(), concat(fn:upper-case($ctx:aplicacion),'/')) and fn:contains($ctx:tmpRequestedRoles , $ctx:localRoleNameWithWrapper)" regex="true" xmlns:um="http://service.ws.um.carbon.wso2.org">
    			<then>
	    			<log>
		    			<property name="LOG - Role matched" expression="$body/um:return/text()" />
		    		</log>
		    		<property name="newRoles" expression="concat($ctx:newRoles, $body/um:return/text(), ',')"/>
		    		<property name="rolesForTicket" expression="replace($ctx:rolesForTicket, $ctx:localRoleNameWithWrapper,',')" />
	    		</then>
	    		<else/>
    		</filter>
    	</sequence>
    </foreach>
    <filter source="$ctx:newRoles" regex=".*,$">
		<then>
			<property name="newRoles" expression="substring($ctx:newRoles, 1, string-length($ctx:newRoles)-1)"/>
		</then>
		<else/>
	</filter>
	<filter source="$ctx:rolesForTicket" regex="^,.*">
		<then>
			<property name="rolesForTicket" expression="substring($ctx:rolesForTicket, 2)"/>
		</then>
		<else/>
	</filter>
	<filter source="$ctx:rolesForTicket" regex=".*,$">
		<then>
			<property name="rolesForTicket" expression="substring($ctx:rolesForTicket, 1, string-length($ctx:rolesForTicket)-1)"/>
		</then>
		<else/>
	</filter>
    
    
    <!--<script description="makeNewRoles" language="js"><![CDATA[makeNewRoles();


// Make new roles for assigning.
function makeNewRoles() {
  var log = mc.getServiceLog();

  var existingFullRoles = mc.getProperty('existingFullRoles');
  var role = mc.getProperty("role");
  var existingFullRole = mc.getProperty("existingFullRole");
  var aplicacion = mc.getProperty('aplicacion');
  var newRoles = mc.getProperty("newRoles");

  var obj = JSON.parse(existingFullRoles);
  for (var i = 0; i < obj.length; i++) {
    var fullRoleName = obj[i];
    var arrayTemp = fullRoleName.split("/");

    // Only for AD
    if (arrayTemp[0].toUpperCase() == aplicacion.toUpperCase()) {
      var roleName = arrayTemp[1];
      var flag = checkInRequestedRole(roleName);
      if (flag) {
      	log.info(fullRoleName);
        newRoles = newRoles + fullRoleName+',';
      }
    }
  }
  mc.setProperty("newRoles", newRoles);
}

function checkInRequestedRole(roleName) {
  var role = mc.getProperty("role");
  var arrayRole = role.split(",");
  for (var i = 0; i < arrayRole.length; i++) {
    if (arrayRole[i] == roleName) {
      return true;
    }
  }
  return false;
}]]></script>-->
    <!-- <script description="makeRolesForTicket" language="js"><![CDATA[makeRolesForTicket();
                    function makeRolesForTicket(){
                    	var log = mc.getServiceLog();
                    	
                    	var role = mc.getProperty("role");
                    	var rolesForTicket = mc.getProperty("rolesForTicket");
                    	var arrayRole=role.split(',');
                    	
                    	for(var iRole=0;iRole<arrayRole.length;iRole++){
                    		var r=arrayRole[iRole];
                    		var flag=check(r);
                    		if(!flag){
                    			rolesForTicket=rolesForTicket+r+',';
                    		}
                    		
                    	}
                    	mc.setProperty("rolesForTicket",rolesForTicket);
                    }
                    
                    function  check(r){
                    	var log = mc.getServiceLog();
                    	var newRoles=mc.getProperty("newRoles");
                    	var arrayNewRoles=newRoles.split(',');
                    	
                    	for(var iNewRoles=0;iNewRoles<arrayNewRoles.length;iNewRoles++){
                    		var rn=arrayNewRoles[iNewRoles];
                    		rn=rn.split('/')[1];
                    		if(r==rn){
                    			return true;
                    		}
                    	}
                    	return false;
                    }]]></script>-->
    <log description="Log" level="custom">
    	<property expression="$ctx:existingFullRoles" name="existingFullRoles"/>
	    <property expression="$ctx:role" name="role"/>
	    <property expression="$ctx:aplicacion" name="aplicacion"/>
        <property expression="$ctx:newRoles" name="newRoles"/>
        <property expression="$ctx:rolesForTicket" name="rolesForTicket"/>
    </log>
    <xslt description="Make Payload" key="gov:pichincha/updateRoleAd.xsl">
        <property expression="$ctx:fullUserName" name="username"/>
        <property expression="$ctx:deletedRoles" name="deletedRoles"/>
        <property expression="$ctx:newRoles" name="newRoles"/>
    </xslt>
    <sequence key="GIUpdateRoleListOfUser_Seq"/>
    <log description="Response" level="custom">
        <property expression="get-property('axis2', 'HTTP_SC')" name="HTTP_SC"/>
    </log>
    <filter regex="true" source="boolean(fn:string-length($ctx:rolesForTicket)>0)">
        <then>
            <property description="scimResponse" expression="fn:concat('No existe estes roles en AD: ',$ctx:rolesForTicket)" name="scimResponse" scope="default" type="STRING"/>
            <sequence key="GIHelpDesk_TicketPayload_Seq"/>
            <log description="Log Request" level="full"/>
            <sequence key="GIHelpDesk_CreateTicket_Seq"/>
            <property description="isTicketGenerated" name="isTicketGenerated" scope="default" type="BOOLEAN" value="true"/>
        </then>
        <else>
            <log description="msg" level="custom">
                <property name="msg" value="No need to create Ticket."/>
            </log>
        </else>
    </filter>
</sequence>
